//Codigo Master

//Opcao de estrategia:
/*Robo A (o que vai entrar em todos os modulos) algoritmo para percorrer todos
  os modulos:
  anda distancia fixa pra frente (sair do pequeno modulo onde o robo inicia)
  
  vira a esquerda (o lado e arbitrario , entretanto mudando o sentido que o robo
  vai circular mudaremos as proximas direçoes para virar)
  
  acelera ate os 2 sensores de toque serem ativados , entao vire a direita
  
  quando o sensor ultrasonico parar de detectar parede "tenta entrar"(verifica 
  a linha preta no chao ou nao)
  
  ao sair do modulo != do central :
  acelera distancia fixa , retorna distancia fixa de re , vira 180 graus
  e acha novamente a linha preta (ou seja achou a entrada dnv)
  
  volta a percorrer o modulo inicial virando para direita.
  */

//Definicao dos Estados
#define MODULOCENTRAL 0		//Quando o robo se encontra no modulo central
#define NAVEGACAO 1			//Quando se encontra no labirinto ou no buraco
#define VOLTA 2				//Voltando para o modulo central

//Definicao de comunicacao
#define BT_CONN 1			//Canal de comunicacao Bluetooth
#define INBOX 1				//Caixa de mensagens recebidas
#define OUTBOX 5			//Caixa de mensagens enviadas

//Definicao de Sensores
#define SENSOR_COR SENSOR_1

//Definicao de cores
#define COR_PRETO 14 							//Fazer medicao

//Definicao de navegacao
#define FRENTE 1
#define TRAS 0
#define ESQUERDA 1
#define DIREITA 0

#define ANGULO 359								//Fazer medicao
#define TEMPO_90_DIREITO 900 					//Fazer medicao
#define TEMPO_90_ESQUERDA 1500					//Fazer medicao
#define POTENCIA_DIR 50							//Fazer medicao
#define POTENCIA_ESQ 50
#define POTENCIA 50
#define LARGURA_MAPA 122						//Fazer medicao
#define LARGURA_ROBO 32							//Fazer medicao

#define TEMPO_ENTRADA 2000
#define TEMPO_TRAS 750

#define MOTOR_ESQ OUT_A
#define MOTOR_DIR OUT_B
#define MOTORES OUT_AB

/*
	TO-DO LIST
	- Correcao do movimentio em linha reta do robo usando os dados do ultrasom
	- Adicionar çodigo para fazer o robo ficar reto quando apenas um sensor de toque estiver ativado.
*/

/* 
	Portas
	- Motor esquerdo = A
	- Motor direito = B
	- Sensor cor = 1
	- Sensor US direito =
	- Sensor US esquerdo = 
*/

struct Sensores {
	int cor;
	
	int som_esq;
	int som_dir;
	
	bool toque_esq;
	bool toque_dir;
};

//Variaveis globais
int estado;					//Estado da maquina de estados
Sensores sensores;


//Move o robo em linha reta para frente ou para tras.
void andar(int sentido, int potencia) {
	/*
	if(sentido == FRENTE)
		OnFwdSync(OUT_AB, potencia, -1.7);
	else
		OnRevSync(OUT_AB, potencia, 0);
	*/
	if(sentido == FRENTE) {
		OnFwd(MOTOR_DIR, potencia);
		OnFwd(MOTOR_ESQ, potencia);
		// 10 muuio bom
	}
	else {
		//OnRevReg(OUT_AB, potencia, OUT_REGMODE_SYNC);
		OnRev(MOTOR_DIR, potencia);
		OnRev(MOTOR_ESQ, potencia);
	}
}

void andarT(int sentido, int potencia, int tempo) {
	if(sentido == FRENTE)
		OnFwdSync(MOTORES, potencia, -1);
	else
		OnRevSync(MOTORES, potencia, 0);

	Wait(tempo);
	Off(MOTORES);
}

//Gira o robo em 90 graus. 
void girar(int sentido, int potencia) {
	if(sentido == ESQUERDA) {
		OnRev(MOTOR_ESQ, potencia);
		OnFwd(MOTOR_DIR, potencia);
		Wait(TEMPO_90_ESQUERDA);
	}
	else {
		OnFwd(MOTOR_ESQ, potencia);
		OnRev(MOTOR_DIR, potencia);
		Wait(TEMPO_90_DIREITO);
	}

	Off(MOTORES);
}

//Definir comunicao bluetooth
sub BTCheck(int conn)
{
	//Checa comunicação bluetooth
	if(!BluetoothStatus(conn)==NO_ERR)
	{
		TextOut(5, 0, "ERROR BT");
		Wait(1000);
		Stop(true);
	}
}

//Imprime estado atual da struct de sensoriamento
void imprimeSensores()
{
	 ClearLine(0);
	 TextOut(0,0,"Cor:");
	 NumOut(40,0,sensores.cor);
	 

	 ClearLine(10);
	 TextOut(0,10,"US Esq:");
	 NumOut(40,10,sensores.som_esq);


	 ClearLine(20);
	 TextOut(0,20,"US Dir:");
	 NumOut(40,20,sensores.som_dir);
	 

	 ClearLine(30);
	 TextOut(0,30,"TQ Esq:");
	 NumOut(40,30,sensores.toque_esq);
	 

	 ClearLine(40);
	 TextOut(0,40,"TQ Dir:");
	 NumOut(40,40,sensores.toque_dir);

}

//Funcao que atualiza os valores da struct de sensores.
task atualizaSensores()
{
	SetSensorUltrasonic(IN_4);
	SetSensorUltrasonic(IN_3);
	SetSensorColorRed(IN_1);
	int input = 0;

	while(1) {

		//Atualiza sensor de toque (Bluetooth)
    	imprimeSensores();
    	ReceiveRemoteNumber(INBOX,true,input);
    	Wait(10);

	      switch (input)
	      {
	         case -1:
	              sensores.toque_esq = false;
	              sensores.toque_dir = false;
	              break;

	         case 1:
	              sensores.toque_esq = false;
	              sensores.toque_dir = true;
	              break;

	         case 10:
	              sensores.toque_esq = true;
	              sensores.toque_dir = false;
	              break;

	         case 11:
	              sensores.toque_esq = true;
	              sensores.toque_dir = true;
	              break;
	      }

  		//Atualiza sensores de cor
		sensores.cor = 	SENSOR_COR;
		
		//Atualiza sensores ultrassonicos 
		sensores.som_dir = SensorUS(IN_3);
		sensores.som_esq = SensorUS(IN_4);
	}
}

// Funcao de navegacao na cratera seguindo paredes
void navegacaoCrateraParede() {

	int distanciaParede;

	andar(FRENTE, POTENCIA);
	//2 eh uma constante que representa um erro da medida
	while(sensores.cor < COR_PRETO - 9 || sensores.cor > COR_PRETO + 9);
	Wait(2000);
	Off(OUT_AB);
	girar(DIREITA, POTENCIA);
	distanciaParede = sensores.som_dir;
	//70 eh uma constante de margem de erro.
	andar(FRENTE, POTENCIA);
	while(sensores.som_dir < distanciaParede + 70) {
		if(sensores.toque_dir == true && sensores.toque_esq == true) {
			andarT(TRAS, POTENCIA, 1000);
			girar(ESQUERDA, POTENCIA);
			distanciaParede = sensores.som_dir;
			andar(FRENTE, POTENCIA);
		}
	}
	Off(OUT_AB);
	girar(DIREITA, POTENCIA);

}

// Funcao de navegacao na cratera 
void navegacaoCrateraLivre() {

	float iteracoes;
	int cont;
	//entra no modulo de cratera
	andar(FRENTE, POTENCIA);
	//2 eh uma constante que representa um erro da medida
	while(sensores.cor < COR_PRETO - 9 || sensores.cor > COR_PRETO + 9);
	Wait(TEMPO_ENTRADA);
	Off(OUT_AB);
	Wait(400);
	girar(DIREITA, POTENCIA); // Quanto tempo ele gira? 
	Wait(400);
	andar(FRENTE, POTENCIA);
	while(sensores.toque_dir == false && sensores.toque_esq == false);
	// while(sensores.toque_esq == false);
	Off(OUT_AB);
	andarT(TRAS, POTENCIA, TEMPO_TRAS);
	girar(ESQUERDA, POTENCIA);
	//Comeco da navegacao em colunas
	//Usar arredondamento para o calculo abaixo.
	iteracoes = LARGURA_MAPA / LARGURA_ROBO;
	
	for(cont = 0; cont < iteracoes; cont++) {
		andar(FRENTE, POTENCIA);
		while(sensores.toque_dir == false && sensores.toque_esq == false);
		// while(sensores.toque_esq == false);
		andarT(TRAS, POTENCIA, 1000);
		girar(ESQUERDA, POTENCIA);
		break;		
	}
}

//Modulo Central
void central()
{

}

//Funcao referente ao primeiro estado
void moduloCentral()
{
	//entra no modulo de cratera

	//INCOMPLETO
	int distanciaInicial;

	//400 eh um numero tempo fixo de locomoca inicial que depende do ambiente, logo deve ser medido
	andarT(FRENTE, POTENCIA, 400);
	girar(DIREITA, POTENCIA);	
	andar(FRENTE, POTENCIA);
	while(sensores.toque_dir != true && sensores.toque_esq != true);
	Off(OUT_AB);
	andarT(TRAS, POTENCIA, 100);
	girar(ESQUERDA, POTENCIA);
	//Comeco da navegacao em colunas
	distanciaInicial = sensores.som_esq;
	//50 eh uma constante de seguranca para evitar problemas do valor do ultrasom
	while(sensores.som_esq > distanciaInicial + 50) {
		andar(FRENTE, POTENCIA);
		if(sensores.toque_dir == true && sensores.toque_esq == true) {
			andarT(TRAS, POTENCIA, 100);
			girar(DIREITA, POTENCIA);
		}
	} 

}

task main() {

	estado = 0;
	BTCheck(BT_CONN);
	StartTask(atualizaSensores);
	sensores.toque_dir = false;
	sensores.toque_esq = false;

	
    /*girar(DIREITA, 60);
    Off(OUT_AB);
    Wait(1000);
    andar(FRENTE, 80);
    Wait(50);*/

    navegacaoCrateraLivre();
}	

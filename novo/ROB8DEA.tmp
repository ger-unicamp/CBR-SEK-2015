//Codigo Nipo
//GER - SEK 2015
//Robo usado para separar os bonecos por cor no modulo central

//Definicoes de constantes
#define FRENTE 1
#define TRAS -1
#define HORARIO 1
#define ANTIHORARIO -1
#define DESLIGA 0

//Struct que armazena os valores atuais dos sensores
struct Sensores{
	int sensor_cor_1;
	int sensor_cor_2;

	int sensor_us;
};

//Variaveis Globais
Sensores sensores;

// potencias sempre de 0 a 100
// para setar a potencia do motor, basta chamar setMotorSpeed uma vez!


//Rotina que atualiza sensores
task atualizaSensores()
{
	while(1){
	//Atualiza sensores de cor
	//sensores.sensor_cor_1 = getColorHue(S2);
	sensores.sensor_cor_2 = getColorHue(S1);

	//Atualiza sensor US
	sensores.sensor_us = SensorValue(S4);
}

}

//Mostra no LCD os estados atuais dos sensores
void imprimeSensores()
{
		displayBigTextLine(0, "US: %d",sensores.sensor_us);
		displayBigTextLine(4, "Cor 2: %d",sensores.sensor_cor_2);
	//	displayBigTextLine(8, "Cor 1: %d",sensores.sensor_cor_1);
}

//Desloca o robo linearmente
// Sentido = uma das constantes
void setaMotor(int sentido, int potencia)
{
   setMotorSpeed (motorB, potencia*sentido);
   setMotorSpeed (motorC, potencia*sentido);
}


// Gira o robo por degreeDado graus
void giraRobo(int sentido, int potencia, long degreeDado)
{
	resetGyro(S3);
    delay (100);
    setMotorSpeed (motorB,potencia*sentido);
		setMotorSpeed (motorC, -potencia*sentido);

    while(getGyroDegrees(S3) < degreeDado*sentido);

    playSound(soundBlip);
    setMotorSpeed(DESLIGA, 0);
    //break;
}

//void RecolheBonecoComPa ()

task main()
{
	startTask(atualizaSensores);

	while (1){

		setaMotor(FRENTE,100);

		if(sensores.sensor_us < 15)
			giraRobo(HORARIO,100,90);

	}
}
